// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: data_specification.proto

#include "data_specification.pb.h"
#include "data_specification.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>

static const char* Data_Send_method_names[] = {
  "/Data_Send/send_data",
};

std::unique_ptr< Data_Send::Stub> Data_Send::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Data_Send::Stub> stub(new Data_Send::Stub(channel));
  return stub;
}

Data_Send::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_send_data_(Data_Send_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Data_Send::Stub::send_data(::grpc::ClientContext* context, const ::Data_msg_req& request, ::Data_msg_res* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_send_data_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::Data_msg_res>* Data_Send::Stub::Asyncsend_dataRaw(::grpc::ClientContext* context, const ::Data_msg_req& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Data_msg_res>::Create(channel_.get(), cq, rpcmethod_send_data_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Data_msg_res>* Data_Send::Stub::PrepareAsyncsend_dataRaw(::grpc::ClientContext* context, const ::Data_msg_req& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Data_msg_res>::Create(channel_.get(), cq, rpcmethod_send_data_, context, request, false);
}

Data_Send::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Data_Send_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Data_Send::Service, ::Data_msg_req, ::Data_msg_res>(
          std::mem_fn(&Data_Send::Service::send_data), this)));
}

Data_Send::Service::~Service() {
}

::grpc::Status Data_Send::Service::send_data(::grpc::ServerContext* context, const ::Data_msg_req* request, ::Data_msg_res* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


